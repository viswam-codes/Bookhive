<%- include('../partials/userHeader.ejs') %>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }
        h1 {
            text-align: center;
            margin-top: 20px;
        }
        table {
            width: 90%;
            margin: 20px auto;
            border-collapse: collapse;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        td:last-child {
            text-align: center;
        }
        a {
            color: #007bff;
            text-decoration: none;
            transition: color 0.3s ease;
        }
        a:hover {
            color: #0056b3;
        }
    </style>
<body>
    <h1>Order Details</h1>
    <table>
        <thead>
            <tr>
                <th>Order Date</th>
                <th>Image</th>
                <th>Order Status</th>
                <th>Payment Status</th>
                <th>Payment Method</th>
                <th>Product Price</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Cancel</th>
            </tr>
        </thead>
        <tbody>
            <% order.items.forEach(item => { %>
                <tr>
                    <td><%= order.orderDate.toDateString() %></td>
                    <td><img src="/uploads/<%= item.image[0] %>" alt="Product Image" style="width: 100px; height: 120px;"></td>
                    <td data-input-id="<%= item._id %>"><%= item.status %></td>
                    <td><%= order.paymentStatus %></td>
                    <td><%= order.paymentMethod %></td>
                    <td>₹<%= item.productPrice.toFixed(2) %></td>
                    <td><%= item.quantity %></td>
                    <td>₹<%= (item.productPrice * item.quantity).toFixed(2) %></td>
                    <td>

                        <% if(item.status==="Delivered") {%>
                            <button onclick="showReturnConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>" >Return</button>

                        <%}%>

                    
                            <% if (item .status!="Cancelled") { %>
                                <% if (item.status === 'Pending' || item.status === 'Confirmed') { %>
                                    <button onclick="showCancelConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>"  >Cancel</button>
                                <% } else { %>
                                    -
                                <% } %>
                            
                            <%} else { %>
                                <button onclick="showCancelConfirmation('<%= order._id %>', '<%= item._id %>')" data-input-id="<%= item._id %>" disabled >order Cancelled</button>
                            
                            <% } %>

                   


                       
                       
                    </td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <table id="summary-table" style="margin-top: 20px;">
        <tbody>
            <% if(order.couponAmount>0) { %>
                <tr>
                    <th>Coupon Amount</th>
                    <td id="couponAmount"><%=order.couponAmount %></td>
                </tr>
            <%}%>
            <tr>
                <th>Grand Total</th>
                <td id="grandTotal">$<%= order.billTotal.toFixed(2) %></td>
            </tr>
        </tbody>
    </table>

    <div style="text-align: center; margin-top: 20px;">
        <% if(order.paymentStatus=== "Failed") { %>
            <button  onclick="retryPayment('<%= order._id %>','<%=order.billTotal%>')" data-input-id="<%= order._id %>"  style="padding: 10px 20px; background-color: #088178; color: white; border: none; border-radius: 5px; cursor: pointer;">Retry</button>
        <%}else if(order.orderStatus=="Delivered") { %>

            <button onclick="downloadInvoice('<%= order._id %>')" style="padding: 10px 20px; background-color: #088178; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Download Invoice
            </button>

        <%}else { %>
            -
            <%}%>
      
    </div>
    
</body>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>

    //------cancel functionality
    function showCancelConfirmation(orderId, itemId) {
        Swal.fire({
            title: 'Cancel Order',
            html: 'Are you sure you want to cancel this order?<br><input type="text" id="cancellationReason" class="swal2-input" placeholder="Enter cancellation reason">',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                const cancellationReason = document.getElementById('cancellationReason').value;
                // Call a function to handle order cancellation
                cancelOrder(orderId, itemId, cancellationReason);
            }
        });
    }

    async function cancelOrder(orderId, itemId, cancellationReason) {
        try {
            const response = await fetch('/cancelOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId, itemId, cancellationReason })
            });
            const data = await response.json();
            if (response.ok) {
                // Handle success
                Swal.fire('Order Cancelled', data.message, 'success');

                document.querySelector(`[data-input-id="${itemId}"]`).textContent = 'Cancelled';
                const cancelButton = document.querySelector(`button[data-input-id="${itemId}"]`);
                cancelButton.innerHTML = 'Order Cancelled';
                cancelButton.disabled = true; // Disable button after cancellation
            location.reload()
            } else {
                // Handle error
                Swal.fire('Error', data.message, 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error', 'An error occurred while cancelling the order', 'error');
        }
    }


 //----return functionality


    function showReturnConfirmation(orderId, itemId) {
        Swal.fire({
            title: 'Return Order',
            html: 'Are you sure you want to return this order?<br><input type="text" id="returnReason" class="swal2-input" placeholder="Enter rearon for returning">',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                const returnReason = document.getElementById('returnReason').value;
                // Call a function to handle order cancellation
                returnOrder(orderId, itemId, returnReason);
            }
        });
    }

    async function returnOrder(orderId, itemId, returnReason) {
        try {
            const response = await fetch('/returnOrder', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ orderId, itemId, returnReason })
            });
            const data = await response.json();
            if (response.ok) {
                // Handle success
                Swal.fire('Order Returned', data.message, 'success');
                location.reload()
              
            } else {
                // Handle error
                Swal.fire('Error', data.message, 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error', 'An error occurred while cancelling the order', 'error');
        }
       
    }
    


    //--invoice functionality 

    async function downloadInvoice(orderId) {
    try {
        const response = await fetch(`/downloadInvoice?orderId=${orderId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `invoice_${orderId}.pdf`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        } else {
            const data = await response.json();
            Swal.fire('Error', data.message, 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while downloading the invoice', 'error');
    }
}


//--- retry payment

function retryPayment(orderId,totalAmount){
    console.log("billtotal",totalAmount);
    fetch("/retryOrder", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(
                       {
                        orderId: orderId,
                        totalAmount: totalAmount
                        
                    })
                })
                .then(response => {
                    // Parse the JSON response
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log("success")
                        // Proceed with Razorpay payment
                        const options = {
                            key: data.key_id,
                            amount: data.amount,
                            currency: "INR",
                            name: "Book Hive",
                            description: data.description,
                            image: "user_assets/myimgs/bookHivelogo.png",
                            order_id: data.order_id,
                            handler: function (response) {
                                console.log(response);
                                retryOrderPlace(orderId,totalAmount,"Success"); 
                            },
                            prefill: {
                                contact: data.contact,
                                name: data.name, 
                                email: data.email
                            },
                            notes: {
                                description: data.description
                            },
                            theme: {
                                color: "#00cc66"
                            },
                          
                        };

                        const razorpayObject = new Razorpay(options);
                        console.log(razorpayObject);
                        razorpayObject.open();

                        razorpayObject.on('payment.failed', function (response) {
                        console.error(response.error);
                        retryOrderPlace(orderId,totalAmount,"Failed"); 
            });
                    } else {
                        // Handle errors if the order couldn't be placed
                        // Show a SweetAlert with a warning and the error message
                        Swal.fire({
                            icon: 'warning',
                            title: 'Order Placement Failed',
                            text: data.msg
                        });
                    }
                })
                .catch(error => {
                    // Handle any network or other errors
                    console.error('Error placing order:', error);
                });
            }

function retryOrderPlace(orderId,totalAmount,status){
    fetch(`/retryOnlineOrder`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(
                       {
                       orderId,
                       totalAmount,
                       status
                    
                        
                    })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if(data.message === "Order placed successfully"){
                Swal.fire({
                icon: "success",
                title: 'Order Confirmed',
                text: "Your payment was successful and the order has been placed.",
                confirmButtonText: "OK"
            }).then((result) => {
                if (result.isConfirmed) {
                    location.reload();
                }
            });

            }else if (data.message ==="Payment failed retry" ){
                Swal.fire({
                icon: "error",
                title: 'Payment Failed',
                text: data.message,
                confirmButtonText: "Ok"
            })
            }
            
        } else {
            Swal.fire({
                icon: 'warning',
                title: 'Order Placement Failed',
                text: data.message
            });
        }
    })
    .catch(error => {
        console.error('Error confirming order:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Placement Failed',
            text: 'There was an error confirming your order. Please try again.'
        });
    });
}

</script>

<%- include('../partials/userFooter.ejs') %>